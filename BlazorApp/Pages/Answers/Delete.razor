@page "/answer/delete/{GameId:int}/{CategoryId:int}/{Year:int}/{Month:int}/{Day:int}"
@using BusinessLayer;
@using ServiceLayer;
@using Microsoft.Extensions.Logging;
@inject ILogger<Answer> logger;
@inject NavigationManager navigationManager;
@inject AnswerManager answerManager;

<h3>Delete Answer</h3>

<EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label for="gameId">Game Id</label>
    <InputNumber id="gameId" @bind-Value="model.GameId" autofocus />

    <label for="cateValueId">Category value Id</label>
    <InputNumber id="cateValueId" @bind-Value="model.CategoryValueId" />

    <label for="categoryId">Category Id</label>
    <InputNumber id="categoryId" @bind-Value="model.CategoryId" />

    <label for="date">Date</label>
    <InputDate id="date" @bind-Value="model.Date" />

    <button type="submit">Delete</button>

</EditForm>

@code
{
    private Answer model = new();

    [Parameter]
    public int GameId { get; set; }

    [Parameter]
    public int CategoryId { get; set; }

    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int Month { get; set; }

    [Parameter]
    public int Day { get; set; }


    protected override Task OnInitializedAsync()
    {
        string date = Year + "-" + Month + "-" + Day;
        DateTime actualDate = DateTime.Parse(date);
        model = new Answer(actualDate, GameId, CategoryId);
        return base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            object[] key = new object[] { model.Date, model.CategoryId, model.GameId };
            await answerManager.DeleteAsync(key);

            logger.Log(LogLevel.Information, "Answer deleted successfully!");
            navigationManager.NavigateTo("answer/index");
        }
        catch (Exception ex)
        {
            logger.Log(LogLevel.Error, ex.Message);
        }
    }

}
