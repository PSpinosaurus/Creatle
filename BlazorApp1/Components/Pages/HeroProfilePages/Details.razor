@page "/heroprofile/details/{GameId:int}/{CategoryId:int}/{HeroId:int}/{ValueId:int}"
@inject ServiceLayer.HeroProfileManager DB
@using BusinessLayer
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<li>
    <h4>HeroProfile</h4>
    <hr />
    @if (heroProfile is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dd class="col-sm-10">@heroProfile</dd>
        </dl>
        <li>
            <a href="@($"/heroprofile/edit?GameId={heroProfile.GameId}/CategoryId={heroProfile.CategoryId}/HeroId={heroProfile.HeroId}/ValueId={heroProfile.ValueId}")">Edit</a> |
            <a href="@($"/heroprofile/index")">Back to List</a>
        </li>
    }
</li>

@code {
    HeroProfile? heroProfile;

    [Parameter]
    public int GameId { get; set; }

    [Parameter]
    public int CategoryId { get; set; }

    [Parameter]
    public int ValueId { get; set; }

    [Parameter]
    public int HeroId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        object[] key = new object[] { ValueId, CategoryId, GameId, HeroId };
        heroProfile = await DB.ReadAsync(key);

        if (heroProfile is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
